package {	import flash.display.MovieClip;	import flash.events.*;	import flash.utils.*;	public class Karin extends MovieClip {		var actions:Array;		var currentActionComplete:Boolean;				//TIMERS ARE CREATED TO FACILITATE MOVEMENT ON A BACKGROUND THREAD		var aTimer1:Timer;		var aTimer2:Timer;		public function Karin () {			this.x = 290;			this.y = 25;			actions = new Array();			currentActionComplete = true;			addEventListener(Event.ENTER_FRAME,processActions);		}						//NOTE: ONLY THREE ACTIONS CAN BE STORED AT ANY GIVEN TIME.		public function kicks ():void {			if (actions.length <= 2) {				actions.push ("kicks");			}		}		public function punches ():void {			if (actions.length <= 2) {				actions.push ("punches");			}		}		public function movesForward ():void {			if (actions.length <= 2) {				actions.push ("movesForward");			}		}		public function movesBackward ():void {			if (actions.length <= 2) {				actions.push ("movesBackward");			}		}		public function processActions (event:Event):void {			if (this.currentFrame < 10) {				currentActionComplete = true;			}			if (currentActionComplete) {				//QUEUE: FIRST IN FIRST OUT.				var action:String = actions[0];				actions.splice(0,1);								//PROCESS ACTIONS				switch (action) {					case "kicks" :						this.gotoAndPlay (10);						currentActionComplete = false;						break;					case "punches" :						this.gotoAndPlay (15);						currentActionComplete = false;						break;					case "movesForward" :						this.gotoAndPlay (22);						//___________________________						//EXECUTE 6 TIMES AT 13 MILLISECONDS EACH TIME						aTimer1 = new Timer(4, 30);						aTimer1.addEventListener(TimerEvent.TIMER,walkForward);						aTimer1.addEventListener(TimerEvent.TIMER_COMPLETE,stopWalkingForward);						aTimer1.start();						//__________________________						currentActionComplete = false;						break;					case "movesBackward" :						this.gotoAndPlay (33);					//___________________________						//EXECUTE 15 TIMES AT 5 MILLISECONDS EACH TIME						aTimer2 = new Timer(4, 30);						aTimer2.addEventListener(TimerEvent.TIMER,walkBackward);						aTimer2.addEventListener(TimerEvent.TIMER_COMPLETE,stopWalkingBackward);						aTimer2.start();						//__________________________						currentActionComplete = false;						break;				}			}		}		//TIMER EVENTS HANDLERS		//_________________________________________________________		function walkForward(event:TimerEvent){			this.x += 1;		}		public function stopWalkingForward(event:TimerEvent) {			aTimer1.removeEventListener(TimerEvent.TIMER,walkForward);		}		function walkBackward(event:TimerEvent){			this.x -= 1;		}		public function stopWalkingBackward(event:TimerEvent) {			aTimer2.removeEventListener(TimerEvent.TIMER,walkBackward);		}	}}